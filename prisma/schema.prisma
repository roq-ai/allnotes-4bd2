generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model business {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  address     String?       @db.VarChar(255)
  city        String?       @db.VarChar(255)
  state       String?       @db.VarChar(255)
  zip         String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  data        data[]
  invitation  invitation[]
  transaction transaction[]
}

model data {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text        String?  @db.VarChar(255)
  number      Int?
  user_id     String   @db.Uuid
  business_id String   @db.Uuid
  type        String?  @db.VarChar(255)
  status      String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  business    business @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invitation {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invited_email   String   @db.VarChar(255)
  status          String   @db.VarChar(255)
  business_id     String   @db.Uuid
  user_id         String   @db.Uuid
  role            String?  @db.VarChar(255)
  invitation_code String?  @db.VarChar(255)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  business        business @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model transaction {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount             Int
  user_id            String    @db.Uuid
  business_id        String    @db.Uuid
  transaction_type   String?   @db.VarChar(255)
  transaction_status String?   @db.VarChar(255)
  transaction_date   DateTime? @db.Date
  created_at         DateTime  @default(now()) @db.Timestamp(6)
  updated_at         DateTime  @default(now()) @db.Timestamp(6)
  business           business  @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user               user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  business    business[]
  data        data[]
  invitation  invitation[]
  transaction transaction[]
}
